import React, { createContext, useContext, useState, useEffect, useRef } from 'react';

// Funci√≥n para obtener la URL base del backend
const getBackendUrl = () => {
  // En desarrollo, usar localhost:8000
  if (import.meta.env.DEV) {
    return 'http://localhost:8000';
  }
  
  // En producci√≥n, usar el dominio de la API
  return 'https://api.pasesfalsos.cl';
};

// Crear el contexto de autenticaci√≥n
const AuthContext = createContext();

// Hook personalizado para usar el contexto de autenticaci√≥n
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth debe ser usado dentro de un AuthProvider');
  }
  return context;
};

// Componente proveedor del contexto de autenticaci√≥n
export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [justLoggedOut, setJustLoggedOut] = useState(false);
  const [accessToken, setAccessToken] = useState(null);
  const [refreshToken, setRefreshToken] = useState(null);

  // Variables para evitar m√∫ltiples verificaciones de sesi√≥n simult√°neas
  const sessionCheckPromiseRef = useRef(null);
  const lastSessionCheckRef = useRef(0);
  const SESSION_CHECK_COOLDOWN = 3000; // 3 segundos de cooldown

  // Funci√≥n para verificar sesi√≥n existente usando cookies httpOnly
  const checkExistingSession = async () => {
    try {
      console.log('üîç Verificando sesi√≥n existente...');
      
      // Si hay una verificaci√≥n en progreso, esperar a que termine
      if (sessionCheckPromiseRef.current) {
        console.log('‚è≥ Esperando verificaci√≥n de sesi√≥n en progreso...');
        return await sessionCheckPromiseRef.current;
      }
      
      // Verificar cooldown para evitar llamadas muy frecuentes
      const now = Date.now();
      if (now - lastSessionCheckRef.current < SESSION_CHECK_COOLDOWN) {
        console.log('‚è∞ Cooldown activo para verificaci√≥n de sesi√≥n');
        return isAuthenticated; // Retornar estado actual
      }
      
      lastSessionCheckRef.current = now;
      
      sessionCheckPromiseRef.current = (async () => {
        try {
          // Si hay refresh_token, validar sesi√≥n con √©l para obtener nuevos tokens
          if (refreshToken) {
            const resp = await fetch(`${getBackendUrl()}/auth/check-session`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ refresh_token: refreshToken })
            });
            if (resp.ok) {
              const data = await resp.json();
              setUser(data.user);
              setIsAuthenticated(true);
              if (data.access_token) {
                setAccessToken(data.access_token);
                localStorage.setItem('access_token', data.access_token);
              }
              if (data.refresh_token) {
                setRefreshToken(data.refresh_token);
                localStorage.setItem('refresh_token', data.refresh_token);
              }
              return true;
            }
          }
          const response = await fetch(`${getBackendUrl()}/auth/session`, {
            credentials: 'include', // Importante para enviar cookies
            method: 'GET',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          if (response.ok) {
            const userData = await response.json();
            console.log('‚úÖ Sesi√≥n activa encontrada:', userData.user);
            console.log('üîç Datos completos de la respuesta:', userData);
            
            // Actualizar estado de autenticaci√≥n
            setUser(userData.user);
            setIsAuthenticated(true);
            
            // Guardar access token si est√° disponible
            if (userData.access_token) {
              console.log('üîë Access token obtenido:', userData.access_token);
              setAccessToken(userData.access_token);
              
              // Guardar token en localStorage para persistencia
              localStorage.setItem('access_token', userData.access_token);
            } else {
              console.log('‚ö†Ô∏è No se encontr√≥ access_token en la respuesta');
            }

            // Guardar refresh_token si est√° disponible
            if (userData.refresh_token) {
              setRefreshToken(userData.refresh_token);
              localStorage.setItem('refresh_token', userData.refresh_token);
            }
            
            // Guardar email para silent login futuro
            if (userData.user && userData.user.email) {
              localStorage.setItem('user_email', userData.user.email);
            }
            
            return true;
          } else if (response.status === 401) {
            console.log('‚ùå Sesi√≥n expirada o inv√°lida');
            // Limpiar estado local si la sesi√≥n es inv√°lida
            setUser(null);
            setIsAuthenticated(false);
            localStorage.removeItem('user_email');
            return false;
          } else {
            console.log('‚ùå Error verificando sesi√≥n:', response.status);
            return false;
          }
        } catch (error) {
          console.error('Error verificando sesi√≥n:', error);
          // En caso de error de red, no limpiar el estado local
          // para evitar desloguear al usuario por problemas temporales
          return false;
        } finally {
          // Limpiar la promesa despu√©s de completarse
          sessionCheckPromiseRef.current = null;
        }
      })();
      
      return await sessionCheckPromiseRef.current;
    } catch (error) {
      console.error('Error verificando sesi√≥n:', error);
      return false;
    }
  };

  // Funci√≥n para intentar silent login usando GET con query parameter
  const attemptSilentLogin = async (email) => {
    try {
      console.log('üîá Intentando silent login para:', email);
      
      // Usar GET con email como query parameter seg√∫n especificaci√≥n del backend
      const response = await fetch(
        `${getBackendUrl()}/auth/google/silent?email=${encodeURIComponent(email)}`,
        { 
          method: 'GET', 
          credentials: 'include' 
        }
      );
      
      if (response.ok) {
        console.log('‚úÖ Silent login exitoso');
        // Verificar sesi√≥n despu√©s del silent login
        const sessionValid = await checkExistingSession();
        return sessionValid;
      } else {
        console.log('‚ùå Silent login fall√≥:', response.status);
        return false;
      }
    } catch (error) {
      console.error('Error en silent login:', error);
      return false;
    }
  };


  // Funci√≥n para verificar autenticaci√≥n al cargar la aplicaci√≥n
  const checkAuthStatus = async () => {
    try {
      setLoading(true);
      
      // Verificar si el usuario acaba de hacer logout
      if (justLoggedOut) {
        console.log('üö™ Usuario acaba de hacer logout, saltando verificaci√≥n de sesi√≥n');
        setJustLoggedOut(false);
        setLoading(false);
        return;
      }
      
      // 1. Verificar si hay sesi√≥n activa
      const hasSession = await checkExistingSession();
      if (hasSession) {
        setLoading(false);
        return;
      }
      
      // 2. Si no hay sesi√≥n, intentar silent login
      const savedEmail = localStorage.getItem('user_email');
      if (savedEmail) {
        console.log('üîÑ Intentando silent login con email guardado:', savedEmail);
        const silentLoginSuccess = await attemptSilentLogin(savedEmail);
        if (silentLoginSuccess) {
          setLoading(false);
          return;
        }
      }
      
      // 3. Si silent login falla, mostrar UI normal
      console.log('‚ÑπÔ∏è Silent login no disponible, mostrando UI normal');
      setLoading(false);
      
    } catch (error) {
      console.error('Error verificando autenticaci√≥n:', error);
      setLoading(false);
    }
  };

  // Funci√≥n para verificar si hay una sesi√≥n activa basada en cookies
  const hasActiveSession = () => {
    // Verificar si hay cookies de sesi√≥n
    return document.cookie.includes('session_token') || 
           document.cookie.includes('sessionid') ||
           document.cookie.includes('connect.sid');
  };

  // Funci√≥n para limpiar todas las cookies de sesi√≥n manualmente
  const clearSessionCookies = () => {
    try {
      console.log('üßπ Limpiando cookies de sesi√≥n manualmente...');
      
      // Obtener el dominio actual
      const domain = window.location.hostname;
      const isLocalhost = domain === 'localhost' || domain === '127.0.0.1';
      
      // Lista de cookies de sesi√≥n comunes
      const sessionCookies = [
        'session_token',
        'sessionid', 
        'connect.sid',
        'auth_token',
        'access_token',
        'refresh_token'
      ];
      
      // Limpiar cada cookie de sesi√≥n
      sessionCookies.forEach(cookieName => {
        // Limpiar para el dominio actual
        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
        
        // Limpiar para subdominios si no es localhost
        if (!isLocalhost) {
          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=.${domain};`;
        }
        
        // Para localhost, tambi√©n intentar limpiar con diferentes configuraciones
        if (isLocalhost) {
          // Limpiar sin dominio espec√≠fico
          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
          // Limpiar con localhost
          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=localhost;`;
          // Limpiar con 127.0.0.1
          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=127.0.0.1;`;
        }
      });
      
      console.log('‚úÖ Cookies de sesi√≥n limpiadas manualmente');
    } catch (error) {
      console.error('Error limpiando cookies manualmente:', error);
    }
  };

  // Funci√≥n para debuggear el estado de las cookies
  const debugCookieState = () => {
    console.log('üç™ Estado actual de las cookies:');
    console.log('Document.cookie:', document.cookie);
    
    const cookies = document.cookie.split(';').reduce((acc, cookie) => {
      const [name, value] = cookie.trim().split('=');
      if (name) acc[name] = value;
      return acc;
    }, {});
    
    console.log('Cookies parseadas:', cookies);
    
    const sessionCookies = ['session_token', 'sessionid', 'connect.sid', 'auth_token'];
    const activeSessionCookies = sessionCookies.filter(name => cookies[name]);
    
    if (activeSessionCookies.length > 0) {
      console.log('‚ö†Ô∏è Cookies de sesi√≥n activas encontradas:', activeSessionCookies);
    } else {
      console.log('‚úÖ No hay cookies de sesi√≥n activas');
    }
    
    return activeSessionCookies.length > 0;
  };

  // Funci√≥n temporal para debuggear cookies con detalles completos
  const debugCookieDetails = () => {
    console.log('üîç Debug detallado de cookies:');
    
    // Obtener todas las cookies con sus atributos
    const cookieDetails = document.cookie.split(';').map(cookie => {
      const [name, value] = cookie.trim().split('=');
      return { name, value };
    });
    
    console.log('Cookies con valores:', cookieDetails);
    
    // Verificar cookies de sesi√≥n espec√≠ficas
    const sessionCookies = ['session_token', 'sessionid', 'connect.sid', 'auth_token'];
    sessionCookies.forEach(cookieName => {
      const cookie = cookieDetails.find(c => c.name === cookieName);
      if (cookie) {
        console.log(`‚úÖ ${cookieName}: ${cookie.value}`);
      } else {
        console.log(`‚ùå ${cookieName}: No encontrada`);
      }
    });
    
    // Verificar headers de respuesta recientes
    console.log('üí° Para ver detalles completos de cookies, revisa:');
    console.log('1. DevTools ‚Üí Application ‚Üí Cookies');
    console.log('2. DevTools ‚Üí Network ‚Üí Response Headers ‚Üí Set-Cookie');
  };

  // Funci√≥n de login inteligente simplificada (sin popups)
  const loginWithGoogle = async () => {
    try {
      console.log('üöÄ Iniciando login inteligente con Google');
      
      const savedEmail = localStorage.getItem('user_email');
      const sessionActive = hasActiveSession();
      
      if (savedEmail && sessionActive) {
        // Usuario ya logueado - verificar sesi√≥n
        console.log('üë§ Usuario ya logueado, verificando sesi√≥n...');
        const sessionValid = await checkExistingSession();
        if (sessionValid) {
          return; // Ya est√° logueado
        }
      }
      
      if (savedEmail) {
        // Usuario registrado pero sin sesi√≥n - intentar silent login
        console.log('üîÑ Usuario registrado, intentando silent login...');
        const silentLoginSuccess = await attemptSilentLogin(savedEmail);
        if (silentLoginSuccess) {
          return; // Silent login exitoso
        }
      }
      
      // Usuario nuevo o silent login fall√≥ - login normal
      console.log('üÜï Usuario nuevo o silent login fall√≥, iniciando login normal');
      window.location.href = `${getBackendUrl()}/auth/google/login`;
      
    } catch (error) {
      console.error('Error en login inteligente:', error);
      // Fallback a login normal
      window.location.href = `${getBackendUrl()}/auth/google/login`;
    }
  };

  // Funci√≥n para inicializar tokens desde localStorage
  const initializeTokens = () => {
    const savedToken = localStorage.getItem('access_token');
    const savedRefresh = localStorage.getItem('refresh_token');
    
    console.log('üîç Inicializando tokens desde localStorage...');
    console.log('üì¶ Token guardado:', !!savedToken);
    console.log('üì¶ Refresh token guardado:', !!savedRefresh);
    
    if (savedRefresh) {
      setRefreshToken(savedRefresh);
    }

    if (savedToken) {
      // Setear token primero
      setAccessToken(savedToken);
      
      // Verificar expiraci√≥n despu√©s de setear
      if (isAccessTokenExpired()) {
        console.log('‚è∞ Token expirado en localStorage, limpiando...');
        setAccessToken(null);
        localStorage.removeItem('access_token');
        return false;
      }
      
      console.log('üîë Token v√°lido encontrado en localStorage');
      return true;
    } else {
      console.log('‚ùå No hay tokens guardados en localStorage');
    }
    
    return false;
  };

  // Verificar autenticaci√≥n al cargar la aplicaci√≥n
  useEffect(() => {
    const initializeAuth = async () => {
      // Inicializar tokens desde localStorage
      initializeTokens();
      
      // Primero procesar callback si existe
      await processLoginCallback();
      
      // Luego verificar estado de autenticaci√≥n
      await checkAuthStatus();
    };
    
    initializeAuth();
  }, []);

  // Funci√≥n para login normal con Google (con UI)
  const handleGoogleLogin = () => {
    console.log('üöÄ Iniciando login normal con Google');
    window.location.href = `${getBackendUrl()}/auth/google/login`;
  };

  // Funci√≥n para procesar callback con par√°metros de URL
  const processLoginCallback = async () => {
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const loginStatus = urlParams.get('login');
      
      if (loginStatus === 'success') {
        console.log('‚úÖ Login exitoso detectado en URL');
        // Verificar sesi√≥n y actualizar UI
        await checkExistingSession();
        
        // Limpiar par√°metros de la URL
        const url = new URL(window.location);
        url.searchParams.delete('login');
        url.searchParams.delete('message');
        window.history.replaceState({}, document.title, url.pathname);
        
      } else if (loginStatus === 'error') {
        console.log('‚ùå Error de login detectado en URL');
        const errorMessage = urlParams.get('message') || 'Error desconocido';
        console.error('Error de login:', errorMessage);
        
        // Limpiar par√°metros de la URL
        const url = new URL(window.location);
        url.searchParams.delete('login');
        url.searchParams.delete('message');
        window.history.replaceState({}, document.title, url.pathname);
      }
    } catch (error) {
      console.error('Error procesando callback:', error);
    }
  };

  // Funci√≥n para cambiar cuenta (con selector de cuentas)
  const handleChangeAccount = () => {
    console.log('üîÑ Iniciando cambio de cuenta');
    window.location.href = `${getBackendUrl()}/auth/google/login?prompt=select_account`;
  };

  // Funci√≥n para cerrar sesi√≥n
  const handleLogout = async () => {
    try {
      console.log('üö™ Cerrando sesi√≥n...');
      
      // Debug: verificar estado de cookies antes del logout
      console.log('üîç Estado de cookies antes del logout:');
      debugCookieState();
      
      // Hacer la llamada al backend para eliminar la cookie
      const response = await fetch(`${getBackendUrl()}/auth/logout`, {
        method: 'POST',
        credentials: 'include'
      });
      
      // Verificar que la respuesta sea exitosa
      if (!response.ok) {
        console.warn('‚ö†Ô∏è El servidor no pudo cerrar la sesi√≥n correctamente:', response.status);
      } else {
        console.log('‚úÖ Backend confirm√≥ el logout exitosamente');
        
        // Verificar las cookies que el backend intent√≥ eliminar
        const setCookieHeader = response.headers.get('set-cookie');
        if (setCookieHeader) {
          console.log('üç™ Cookie eliminada por el backend:', setCookieHeader);
        }
      }
      
      // Limpiar estado local
      setUser(null);
      setIsAuthenticated(false);
      setAccessToken(null);
      setRefreshToken(null);
      localStorage.removeItem('user_email');
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
      
      // Marcar que el usuario acaba de hacer logout
      setJustLoggedOut(true);
      
      // Limpiar cookies manualmente como respaldo
      clearSessionCookies();
      
      // Hacer una verificaci√≥n adicional de la sesi√≥n para asegurar que se elimin√≥
      console.log('üîç Verificando sesi√≥n despu√©s del logout...');
      try {
        const sessionCheck = await fetch(`${getBackendUrl()}/auth/session`, {
          credentials: 'include',
          method: 'GET'
        });
        
        if (sessionCheck.ok) {
          console.warn('‚ö†Ô∏è El backend a√∫n reporta una sesi√≥n activa despu√©s del logout');
          const sessionData = await sessionCheck.json();
          console.log('Datos de sesi√≥n:', sessionData);
        } else {
          console.log('‚úÖ El backend confirma que no hay sesi√≥n activa');
        }
      } catch (error) {
        console.log('‚ÑπÔ∏è No se pudo verificar la sesi√≥n en el backend:', error.message);
      }
      
      // Debug: verificar estado de cookies despu√©s de la limpieza
      console.log('üîç Estado de cookies despu√©s de la limpieza:');
      const stillHasCookies = debugCookieState();
      
      if (stillHasCookies) {
        console.warn('‚ö†Ô∏è A√∫n hay cookies de sesi√≥n activas despu√©s del logout');
      } else {
        console.log('‚úÖ Todas las cookies de sesi√≥n fueron eliminadas correctamente');
      }
      
      console.log('‚úÖ Sesi√≥n cerrada exitosamente');
      
      // NO recargar la p√°gina, solo limpiar el estado
      // Esto evita que se ejecute el silent login autom√°tico
      console.log('üîÑ Estado limpiado, usuario deslogueado');
      
    } catch (error) {
      console.error('Error cerrando sesi√≥n:', error);
      // Limpiar estado local incluso si hay error
      setUser(null);
      setIsAuthenticated(false);
      setAccessToken(null);
      setRefreshToken(null);
      localStorage.removeItem('user_email');
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
      
      // Marcar que el usuario acaba de hacer logout
      setJustLoggedOut(true);
      
      // Limpiar cookies manualmente como respaldo
      clearSessionCookies();
      
      // Debug: verificar estado de cookies despu√©s del error
      console.log('üîç Estado de cookies despu√©s del error:');
      debugCookieState();
      
      console.log('üîÑ Estado limpiado despu√©s del error, usuario deslogueado');
    }
  };

  // Verificaci√≥n de expiraci√≥n basada en JWT (exp)
  const isAccessTokenExpired = () => {
    if (!accessToken) return true;
    try {
      const payload = JSON.parse(atob(accessToken.split('.')[1]));
      return Date.now() >= payload.exp * 1000;
    } catch {
      return true;
    }
  };


  // Funci√≥n para renovar el access token
  const refreshAccessToken = async () => {
    try {
      console.log('üîÑ Renovando access token...');
      const currentRefresh = refreshToken || localStorage.getItem('refresh_token');
      if (!currentRefresh) {
        console.log('‚ùå No hay refresh_token disponible, cerrando sesi√≥n');
        await handleLogout();
        throw new Error('No refresh token');
      }

      const response = await fetch(`${getBackendUrl()}/auth/refresh`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ refresh_token: currentRefresh })
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Token renovado exitosamente');
        
        setAccessToken(data.access_token);
        
        // Guardar token renovado en localStorage
        localStorage.setItem('access_token', data.access_token);
        if (data.refresh_token) {
          setRefreshToken(data.refresh_token);
          localStorage.setItem('refresh_token', data.refresh_token);
        }
        
        return data.access_token;
      } else {
        console.log('‚ùå Error renovando token:', response.status);
        await handleLogout();
        throw new Error('No se pudo renovar el token');
      }
    } catch (error) {
      console.error('Error renovando token:', error);
      await handleLogout();
      throw error;
    }
  };

  // Variables para evitar m√∫ltiples llamadas simult√°neas
  const tokenRefreshPromiseRef = useRef(null);
  const lastTokenRefreshRef = useRef(0);
  const TOKEN_REFRESH_COOLDOWN = 5000; // 5 segundos de cooldown

  // Funci√≥n para obtener el token de autenticaci√≥n
  const getAuthToken = async () => {
    console.log('üîë getAuthToken llamado - accessToken:', !!accessToken, 'expired:', isAccessTokenExpired());
    
    // 1. Token v√°lido existente
    if (accessToken && !isAccessTokenExpired()) {
      console.log('‚úÖ Usando token existente v√°lido');
      return accessToken;
    }
    
    // 2. Evitar llamadas simult√°neas
    if (tokenRefreshPromiseRef.current) {
      console.log('‚è≥ Esperando llamada de token en progreso...');
      return await tokenRefreshPromiseRef.current;
    }
    
    // 3. Verificar cooldown
    const now = Date.now();
    if (now - lastTokenRefreshRef.current < TOKEN_REFRESH_COOLDOWN) {
      console.log('‚è∞ Cooldown activo, usando token existente si est√° disponible');
      return accessToken || null;
    }
    
    lastTokenRefreshRef.current = now;
    
    tokenRefreshPromiseRef.current = (async () => {
      try {
        // Prioridad 1: Renovar con refresh_token
        if (refreshToken || localStorage.getItem('refresh_token')) {
          console.log('üîÑ Intentando renovar con refresh_token...');
          return await refreshAccessToken();
        }
        
        // Prioridad 2: Obtener token fresco desde /auth/session
        console.log('üîÑ Obteniendo token fresco desde /auth/session...');
        const response = await fetch(`${getBackendUrl()}/auth/session`, {
          credentials: 'include',
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });
        
        if (response.ok) {
          const data = await response.json();
          if (data.access_token) {
            console.log('‚úÖ Token fresco obtenido desde /auth/session');
            setAccessToken(data.access_token);
            localStorage.setItem('access_token', data.access_token);
            return data.access_token;
          }
        }
        
        console.log('‚ö†Ô∏è No se pudo obtener token fresco');
        return null;
      } finally {
        tokenRefreshPromiseRef.current = null;
      }
    })();
    
    return await tokenRefreshPromiseRef.current;
  };

  // Funci√≥n para hacer llamadas autenticadas a la API
  const authenticatedApiCall = async (endpoint, options = {}) => {
    try {
      console.log('üåê authenticatedApiCall iniciada para:', endpoint);
      
      // Obtener el token de autenticaci√≥n
      const token = await getAuthToken();
      
      // Preparar headers
      const headers = {
        'Content-Type': 'application/json',
        ...options.headers
      };
      
      // Solo agregar Authorization si hay token
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
        console.log('üîë Token Bearer agregado a headers:', `Bearer ${token.substring(0, 20)}...`);
      } else {
        console.log('‚ö†Ô∏è No hay token disponible, usando solo cookies');
      }
      
      const url = `${getBackendUrl()}${endpoint}`;
      console.log('üì° Haciendo llamada a:', url);
      console.log('üìã Headers enviados:', headers);
      
      const response = await fetch(url, {
        ...options,
        credentials: 'include', // Importante para enviar cookies
        headers
      });
      
      console.log('üì• Respuesta recibida:', response.status, response.statusText);
      
      if (!response.ok) {
        if (response.status === 401) {
          console.log('üîí 401 - Intentando refrescar y reintentar');
          try {
            await refreshAccessToken();
            const retryHeaders = {
              'Content-Type': 'application/json',
              ...options.headers
            };
            const retryToken = localStorage.getItem('access_token');
            if (retryToken) retryHeaders['Authorization'] = `Bearer ${retryToken}`;
            const retryResponse = await fetch(`${getBackendUrl()}${endpoint}`, {
              ...options,
              credentials: 'include',
              headers: retryHeaders
            });
            if (!retryResponse.ok) {
              throw new Error(`Error del servidor: ${retryResponse.status}`);
            }
            return retryResponse;
          } catch (e) {
            throw new Error('Token de autenticaci√≥n inv√°lido o expirado');
          }
        } else if (response.status === 403) {
          console.log('üö´ Acceso denegado');
          throw new Error('No tienes permisos para realizar esta acci√≥n');
        } else if (response.status >= 500) {
          console.log('üî• Error del servidor');
          throw new Error('Error interno del servidor. Int√©ntalo m√°s tarde.');
        } else {
          console.log('‚ùå Error HTTP:', response.status);
          throw new Error(`Error del servidor: ${response.status}`);
        }
      }
      
      return response;
    } catch (error) {
      console.error('Error en llamada autenticada:', error);
      
      // Si es un error de red, no limpiar la sesi√≥n
      if (error.name === 'TypeError' && error.message.includes('fetch')) {
        console.log('üåê Error de red, manteniendo sesi√≥n local');
        throw new Error('Error de conexi√≥n. Verifica tu conexi√≥n a internet.');
      }
      
      throw error;
    }
  };


  const value = {
    user,
    loading,
    isAuthenticated,
    justLoggedOut,
    accessToken,
    refreshToken,
    setUser,
    setIsAuthenticated,
    handleGoogleLogin,
    handleChangeAccount,
    handleLogout,
    getAuthToken,
    refreshAccessToken,
    authenticatedApiCall,
    // Funciones de debug y utilidades
    debugCookieState,
    debugCookieDetails,
    clearSessionCookies,
    hasActiveSession,
    // Mantener compatibilidad con nombres anteriores
    loginWithGoogle: loginWithGoogle, // Usar la nueva funci√≥n inteligente
    loginWithGoogleForceSelection: handleChangeAccount,
    logout: handleLogout
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};
